{"documentVersion":"1.0","formType":"code","uuid":"2023-09-06-20-43_21c3e544-9a4e-456d-8cb7-2d4ffbc7ee45","language":"en","questionPresentFlag":false,"encryptionFlag":true,"compressionFlag":false,"expiryDate":"2024-03-06T14:27:19.599Z","fullPackage":{"documentVersion":"1.0","formType":"code","language":"en","encryptionFlag":true,"compressionFlag":false,"codeLanguage":"62","questionPresentFlag":false,"submissionDeadline":"","expiryDate":"2024-03-06T14:27:19.599Z","question":"","author":"sameep","title":"Java Project","initialTimeStamp":"2023-07-17T10:41:12.233Z","finalTimeStamp":"2023-09-06T14:27:19.590Z","minimumLoggingInterval":320000,"answerVersions":{"2023-07-17T10:42:01.359Z":"\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\nclass Visitor {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\"); \n    }\n}\n\n/* =================================================\nNew1.java\n================================================= */\n\n","2023-07-17T10:47:52.407Z":"\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void Visitor(String[] args) {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nRollerCoaster.java\n================================================= */\n\n//initailizing rollercoaster class","2023-07-17T10:54:51.983Z":"\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main(String[] args) {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n//initailizing rollercoaster class\npublic class Rollercoaster\n{\n    public static void main(string[] args)\n    {\n        System.out.println(\"I am rollercoster class\")\n\n        //initialiazing class variables;\n        \n    }\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    public static void main(string[] args)\n    {\n        system.out.println(\"I am Dodgems class\")\n    }\n}","2023-07-17T11:00:22.025Z":"\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main(String[] args) {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n//initailizing rollercoaster class\npublic class Rollercoaster\n{\n    public static void main(string[] args)\n    {\n        System.out.println(\"I am rollercoster class\")\n\n        //initialiazing class variables;\n        \n    }\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main(string[] args)\n    {\n        system.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic playground{\n    public static void main(string[] args)\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\")\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class park{\n    public static void main(string[] args)\n    {\n        system.out.println(\"\")\n    }\n\n}","2023-07-17T11:15:24.407Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n    }\n\n    Rollercoster rollercoaster = new Rollercoaster()\n    rollercoster.printFunc();\n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n//initailizing rollercoaster class\npublic class Rollercoaster\n{\n    public static void printFunc()\n    {\n        System.out.println(\"I am rollercoster class\");\n\n        //initialiazing class variables;\n        \n    }\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void printFunc()\n    {\n        system.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic playground{\n    public static void printFunc()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class park{\n    public static void printFunc()\n    {\n        // print out the name of class\n        system.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void printFunc()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}","2023-07-17T11:24:44.577Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n\n    \n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        system.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class park{\n    public static void main()\n    {\n        // print out the name of class\n        system.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}","2023-07-17T11:28:05.079Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();    \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        system.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic Playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class park{\n    public static void main()\n    {\n        // print out the name of class\n        system.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}","2023-07-17T12:35:08.841Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();    \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAtrraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction{\n\n    public static void main()\n    {\n      System.out.println(\"I am abstract class\")\n    }\n\n}","2023-07-17T12:43:22.418Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class\n    Attraction attraction = new Attraction();\n    attraction.main();  \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction{\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\n// abstract stall","2023-07-17T12:50:56.009Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    Attraction attraction = new Attraction();\n    attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction{\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name)\n}","2023-07-17T12:56:38.757Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    Attraction attraction = new Attraction();\n    attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction{\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TObaccoStall{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStal class\");\n    }\n}","2023-07-18T09:54:56.752Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction{\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n\npublic int isallowe\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}","2023-07-18T10:01:12.399Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction{\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nIsecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//in","2023-07-18T10:12:20.633Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster implements ISecurity {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground implements ISecurity{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction i{\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T10:19:00.856Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, IReviewed {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T10:23:37.967Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, IReviewed {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n    {\n\n    }\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T10:32:55.980Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, IReviewed {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name \"\\n Rating is\" + rating +\" \\n Times visited \"+ viit\n\n)\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T10:39:13.259Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, IReviewed {\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        if visitor.\n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T10:47:10.640Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n\n    public in defaultprice()\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)?true:false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)?true:false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T10:53:00.590Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parametersimp\n    public double defaultprice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return 8.4: return 16.8\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:10:01.468Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n Rollercoster(){} //default construtor\n\n Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return 8.4: return 16.8\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n    dodgems() {} //default constructor\n\n    Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating)\n    }\n\n    public double default\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\n\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:16:19.352Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n Rollercoster(){} //default construtor\n\n Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n    dodgems() {} //default constructor\n\n    Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\np\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:22:02.288Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating)\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction implements IReviewed{\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(S)\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:31:30.685Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:35:34.892Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){}\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return (\" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\");\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return(\"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"rating =>\" + rating\n        )\n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:43:02.170Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    \n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:47:28.432Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// ge\n    public int getAge()\n    {\n        return age;\n    }\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T11:51:04.775Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\npublic int countVisitedAttractions()\n{\nreti\n}\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}","2023-07-18T12:54:08.697Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class","2023-07-18T12:57:08.595Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\")\n    S\n\n\n    }\n}","2023-07-18T13:00:09.421Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt\n\n\n\n\n    }\n}","2023-07-18T13:03:21.785Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n\n\n\n\n    }\n}","2023-07-18T13:08:11.459Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"1. Ride roller co\");\n\n    }\n\n\n\n\n    }\n}","2023-07-18T13:11:15.984Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n\n\n\n    }\n\n\n\n\n    }\n}","2023-07-18T13:14:22.698Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\")\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedT)\n            }\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-07-18T13:17:31.983Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\")\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\")+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    re.addVisit(r2);\n\n                }\n            }\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-07-18T13:26:36.975Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\")\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\")+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").char(0);\n                      if (answ)\n\n\n\n\n                }\n            }\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-07-18T13:32:44.180Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\")\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\")+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").char(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue:\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                    \n            }\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-07-18T13:42:45.148Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\")\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\")+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").char(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue:\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                { //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-07-18T13:46:53.844Z":"\n\n/* =================================================\nMain.java\n================================================= */\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n\n    \n    \n      \n    }\n\n   \n\n    \n\n}\n\n/* =================================================\nRollercoaster.java\n================================================= */\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoster(){} //default construtor\n\npublic Rollercoster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n/* =================================================\nDodgems.java\n================================================= */\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n/* =================================================\nPlayground.java\n================================================= */\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n/* =================================================\nPark.java\n================================================= */\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n/* =================================================\nVisitor.java\n================================================= */\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n/* =================================================\nAttraction.java\n================================================= */\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n/* =================================================\nStall.java\n================================================= */\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n/* =================================================\nCandyFlossStall.java\n================================================= */\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n/* =================================================\nTobaccoStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n/* =================================================\nIceCreamStall.java\n================================================= */\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n/* =================================================\nISecurity.java\n================================================= */\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n/* =================================================\nITicketed.java\n================================================= */\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n/* =================================================\nIReviewed.java\n================================================= */\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n/* =================================================\nThemePark.java\n================================================= */\n\nimport java.util.Scanner; //scanner class\n\npublic class Themepark{\n    //calling menu in the themepark.\n\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\")\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\")+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").char(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue:\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                        \n\n            }\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T11:54:05.246Z":"\n\n==+==\nFILE: Main.java\n==+==\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n      \n    }\n\n    //  menu method call from ThemePark.java\n    \n        ThemePark themepark = new ThemePark();\n        // themepark.menu();   \n\n\n\n\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n//  public Rollercoster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getHeight<=200)?return defaultPrice(): return defaultPrice()*2;\n    }\n\n    public\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n        (visitor.getAge()>=12 && visitor.getHeight()>145)? return true: return false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n    public static void main()\n    {\n        System.out.println(\"I am attraction class\");\n    }\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\n\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu(String[] args)\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\");\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:00:20.558Z":"\n\n==+==\nFILE: Main.java\n==+==\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n      \n    }\n\n    //  menu method call from ThemePark.java\n    \n        ThemePark themepark = new ThemePark();\n        // themepark.menu();   \n\n\n\n\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}; // Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount ++};\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating;\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu(String[] args)\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\");\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:05:48.274Z":"\n\n==+==\nFILE: Main.java\n==+==\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n      \n    }\n\n    //  menu method call from ThemePark.java\n    \n        ThemePark themepark = new ThemePark();\n        // themepark.menu();   \n\n\n\n\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n    public static void main()\n     {\n        System.out.println(\"I am visitor class\"); \n    }\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    @override\n    public string displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\nabstract class stall {\n    public static void main()\n    {\n        System.out.println(\"I am stall class\");\n    }\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public string dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu(String[] args)\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\");\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:13:29.716Z":"\n\n==+==\nFILE: Main.java\n==+==\n\n// initializing visitor class\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"I am main class\"); \n// calling rollercoaster class\n         Rollercoaster rollercoaster = new Rollercoaster();\n        rollercoaster.main();\n\n    // calling Dodgems class\n    Dodgems dodgems = new  Dodgems();\n    dodgems.main();\n\n    // calling Playground class\n    Playground playground = new Playground();\n    playground.main();\n\n    // calling park class;\n    Park park = new Park();\n    park.main();\n\n    // calling visitor class;\n    Visitor visitor = new Visitor();\n    visitor.main();  \n\n// calling attraction class it is abstraction thus cant be instantiated \n//make another function instead.\n    // Attraction attraction = new Attraction();\n    // attraction.main();\n      \n    }\n\n    //  menu method call from ThemePark.java\n    \n        ThemePark themepark = new ThemePark();\n        // themepark.menu();   \n\n\n\n\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements Ireviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        (visitor.getAge()<12)? return defaultPrice()/2: return defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@overeride\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        (visitor.getAge()<=15)? return true: return false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu(String[] args)\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\");\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:19:31.027Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n    public static void main()\n    {\n        // print out the name of class\n        System.out.println(\"I am park class\");\n    }\n\npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu(String[] args)\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = Scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    system.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        system.out.println(\"enter choice\");\n        int choice = scanner.nectInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                system.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    system.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= re.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:25:32.727Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    \n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r2);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:32:10.418Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit(r);\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:37:30.879Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:43:14.983Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n        public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n    int totalAttractionss;\n\n    public void incTotalAttractionsVisited()\n    {\n        totalAttractions++;\n    }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String displayData()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVistedAttractions(Attraction attraction)\n{\n    visitedAttrctions.add(attraction);\n}\n\npublic void addVisitedStalls(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\npublic int countVisitedStalls()\n{\n    return visitedStalls.size();\n\n}\n\npublic void displayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisitedAttractions(r2);\n                    r2.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:51:17.634Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisted(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addvisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==\"Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T12:57:08.178Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer ==Y\"){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisitedAttractions(d1);\n                    d1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisitedAttractions(p1);\n                    p1.addVisit();\n                    visitor.incTotalAttractionsVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisitedAttractions(playGround);\n                        playGround.addVisit();\n                        visitor.incTotalAttractionsVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T13:04:32.976Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n    // print the mane of class\n    public static void main()\n    {\n        System.out.println(\"I am Dodgems class\");\n    }\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n       public static void main()\n    {\n        System.out.println(\"I am CandyFlossStall class\");\n    }\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playGround.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playGround);\n                        playGround.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playGround.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T13:13:31.052Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\n//initializing candyfloss stall\npublic CandyFlossStall extends Stall implements Isecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int parkingSpot, int rating )\n    {\n        super(name, ownerName, parkingSpot, rating);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true\n    }\n\n    else return false;\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(string name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addVisitedStalls(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T13:23:25.473Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String dispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic  IceCreamStall extends Stall{\n       public static void main()\n    {\n        System.out.println(\"I am IceCreamStall class\");\n    }\n\n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addVisitedStalls(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.displayData());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T13:28:54.880Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getheight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String displayData()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String ispalyData()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T13:39:23.042Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n    public static void main()\n     {\n        System.out.println(\"I am rollercoaster class\"); \n    }\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    public double priceFor(Visitor visitor)\n    {\n       return (visitor.getHeight<=200)?defaultPrice():defaultPrice()*2;\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getHeight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String toString()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T13:54:05.037Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    //priceFor method based on height\n    public double priceFor(Visitor visitor){\n        if(visitor.getHeight() > 200){ //if user is above 200 cm they must pay 16.8\n            return 16.8;\n        }\n        else{ //else they must pay 8.4\n            return 8.4;\n        }\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getHeight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String toString()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner; //scanner class\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt(); // get choice from user\n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T14:01:19.250Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    //priceFor method based on height\n    public double priceFor(Visitor visitor){\n        if(visitor.getHeight() > 200){ //if user is above 200 cm they must pay 16.8\n            return 16.8;\n        }\n        else{ //else they must pay 8.4\n            return 8.4;\n        }\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getHeight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String toString()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner;\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\nint choice = scanner.nextInt();        \n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T14:06:43.407Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    //priceFor method based on height\n    public double priceFor(Visitor visitor){\n        if(visitor.getHeight() > 200){ //if user is above 200 cm they must pay 16.8\n            return 16.8;\n        }\n        else{ //else they must pay 8.4\n            return 8.4;\n        }\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getHeight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String toString()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner;\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt();        \n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        break;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            break;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","2023-09-06T14:27:19.590Z":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    //priceFor method based on height\n    public double priceFor(Visitor visitor){\n        if(visitor.getHeight() > 200){ //if user is above 200 cm they must pay 16.8\n            return 16.8;\n        }\n        else{ //else they must pay 8.4\n            return 8.4;\n        }\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getHeight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String toString()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner;\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt();        \n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}"},"answer":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    //priceFor method based on height\n    public double priceFor(Visitor visitor){\n        if(visitor.getHeight() > 200){ //if user is above 200 cm they must pay 16.8\n            return 16.8;\n        }\n        else{ //else they must pay 8.4\n            return 8.4;\n        }\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getHeight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String toString()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner;\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt();        \n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}","unfilteredAnswer":"\n\n==+==\nFILE: Main.java\n==+==\n\npublic class Main {\n    public static void main(String[] args) {\n        //menu method call from ThemePark.java\n        ThemePark tp = new ThemePark();\n        tp.menu();\n    }\n}\n\n\n==+==\nFILE: Rollercoaster.java\n==+==\n\n// initializing visitor class\npublic class Rollercoaster extends Attraction implements ISecurity, ITicketed{\n\n// parameters implemented from the  Attraction class\n public Rollercoaster(){} //default construtor\n\npublic Rollercoaster (String name, int rating) //parameterized constructor\n {\n    super(name, rating);\n }\n    public double defaultPrice()\n    {\n        return 8.4;\n    }\n\n    //priceFor method based on height\n    public double priceFor(Visitor visitor){\n        if(visitor.getHeight() > 200){ //if user is above 200 cm they must pay 16.8\n            return 16.8;\n        }\n        else{ //else they must pay 8.4\n            return 8.4;\n        }\n    }\n\n    @Override\n     public boolean isAllowedTo(Visitor visitor)\n     {\n       return (visitor.getAge()>=12 && visitor.getHeight()>145)? true:false;\n     } \n\n     \n}\n\n\n==+==\nFILE: Dodgems.java\n==+==\n\n//initailizing Dodgems class\n\npublic class Dodgems extends Attraction implements IReviewed\n{\n\n   public Dodgems() {} //default constructor\n\n    public Dodgems(String name,int rating) //parameterized constructor\n    {\n        super(name, rating);\n    }\n\n    public double defaultPrice()\n    {\n        return 4.50;\n    }\n\n    \n    public double priceFor(Visitor visitor)\n    {\n        return(visitor.getAge()<12)? defaultPrice()/2:defaultPrice();\n    }\n}\n\n\n==+==\nFILE: Playground.java\n==+==\n\n// initializing play class\npublic class Playground extends Attraction implements ISecurity, IReviewed{\n    public static void main()\n    {\n        //print name of the class\n        System.out.println(\"I am Playground class\");\n    }\npublic Playground() {}\n\npublic Playground(String name, int rating){  \n    super (name, rating);\n\n}\n\n@Override\n    public boolean isAllowedTo(Visitor visitor)\n    {\n        return(visitor.getAge()<=15)? true: false;\n    \n    }\n}\n\n\n==+==\nFILE: Park.java\n==+==\n\n//initializing park class\npublic class Park extends Attraction {\n \npublic Park(){} // deafualt constructor\n\n// parameterized constructor for class Park\n    public Park(String name, int rating){  \n    super (name, rating);\n\n}\n}\n\n\n==+==\nFILE: Visitor.java\n==+==\n\n// initializing visitor class\nimport java.util.ArrayList;\npublic class Visitor {\n\n       public int age, height;\n        public double money;\n        public int totalAttractions;\n\n        public void incVisited()\n        {\n        totalAttractions++;\n        }\n\n    public int getTotalAttractions()\n    {\n        return totalAttractions;\n    }\n\n\n\n    @Override\n    public String toString()\n    {\n        return \"Visited Attractions =>\"+visitedAttractions + \"Visited Stalls ==>\"+ visitedStalls; \n    }\n        \n        public Visitor(){} // default \n\n    private ArrayList<Attraction> visitedAttractions;\n    private ArrayList<Stall> visitedStalls;\n\n    public Visitor(int age, int height, double money)\n    {\n        this.age = age;\n        this.height=height;\n        this.money = money;\n        visitedAttractions = new ArrayList<>();\n        visitedStalls = new ArrayList<>();\n    }\n\n\n\n\n\n// getting required data\n    public int getAge()\n    {\n        return age;\n    }\n\n    public int getHeight()\n    {\n        return height;\n    }\n\n    public double getMoney()\n    {\n        return money;\n    }\n\n// adding visited attractions in our array\npublic void addVisited(Attraction attraction)\n{\n    visitedAttractions.add(attraction);\n}\n\npublic void addStall(Stall stall)\n{\n    visitedStalls.add(stall);\n}\n\n//counting how many attractions and stalls were visited\n\npublic int countVisitedAttractions()\n{\nreturn visitedAttractions.size();\n}\n\n\npublic void DisplayVisited()\n{\n    System.out.println(visitedAttractions);\n    System.out.println(visitedStalls);\n}\n\n\n\n}\n\n\n==+==\nFILE: Attraction.java\n==+==\n\n//initializing initial abstraction class\nabstract class Attraction implements IReviewed {\n\n    // variablesof attraction class\n    String name;\n    int rating;\n    public int visitCount;\n\n    Attraction(){}// Default construtor\n\n    Attraction(String name, int rating){\n        this.name = name;\n        this.rating = rating;\n\n    }\n\n    public void addVisit(){visitCount++;}\n\n    //get name and rating \n    public String getName(){\n        return name;\n    }\n\n    public int getRating()\n     {\n        return rating;\n     }\n\n\n// calling the method to display visited attractions\n@Override\npublic String toString()\n{\n    return \" \\n Visited Attractions \\n\" + \"Name of Attraction \" +name+\n     \"\\n Rating is\" + rating +\" \\n Times visited \"+ visitCount +\n     \"\\n -----------------------\\n\";\n\n}\n\n\n\n}\n\n\n==+==\nFILE: Stall.java\n==+==\n\n//initailizing stall class\npublic abstract class Stall implements IReviewed {\n\n    public String name,  ownerName;\n    public int rating, parkingSpot;\n\n    public Stall ( String Name, String ownerName, int rating, int parkingSpot)\n    {\n        this.name = name;\n        this.ownerName=ownerName;\n        this.rating = rating;\n        this.parkingSpot = parkingSpot;\n    }\n\n    //get values in the class\n\n    public  String getName()\n    {\n        return name;\n    }\n\n    public String getOwnerName()\n    {\n        return ownerName;\n    }\n\n    public int getRating()\n    {\n        return rating;\n    }\n\n    public int getparkingSpot(){\n        return parkingSpot;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"\\n data of stall \\n\"\n        + \"name of stall =>\"+ name +\"\\n owner name => \"+ ownerName+\n        \"\\n Rating =>\" + rating + \"\\nparking spot =>\"+parkingSpot + \"\\n---------------------\\n\";\n        \n    }\n\n}\n\n\n==+==\nFILE: CandyFlossStall.java\n==+==\n\npublic class CandyFlossStall extends Stall implements ISecurity{\n\n// parameters fromclass stall\n    public CandyFlossStall(String name , String ownerName, int rating, int parkingSpot )\n    {\n        super(name, ownerName, rating, parkingSpot);\n    }\n    \n// only someone greaterthan 18 is allowed to visit\npublic boolean isAllowedTo(Visitor visitor)\n{\n    if(visitor.getAge()>=18)\n    {\n        return true;\n    }\n\n    else \n    {return false;}\n\n}\n}\n\n\n==+==\nFILE: TobaccoStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class  TobaccoStall extends Stall implements ISecurity{\n       public static void main()\n    {\n        System.out.println(\"I am TobaccoStall class\");\n    }\n\npublic TobaccoStall(String name , String ownerName, int parkingSpot, int rating)\n{\n    super(name , ownerName, parkingSpot, rating);\n}\n\n//only someone with age greater tha 18 is allowed to visit\npublic boolean isAllowedTo (Visitor visitor){\n    if(visitor.getAge() >=18)\n    return true;\n    else\n    return false;\n\n}\n}\n\n\n==+==\nFILE: IceCreamStall.java\n==+==\n\n//initializing tobaccostall stall\npublic class IceCreamStall extends Stall{\n   \n    public IceCreamStall(String name, String ownerName, int parkingSpot, int rating){\n        super(name, ownerName, parkingSpot, rating);\n    }\n}\n\n\n==+==\nFILE: ISecurity.java\n==+==\n\n//implementing isecurity class\n\npublic interface ISecurity{\n    //check boolean is allowed to visitor\n\n    public boolean isAllowedTo(Visitor visitor);\n\n}\n\n\n==+==\nFILE: ITicketed.java\n==+==\n\n//declaring the iticketed intrface\npublic interface ITicketed{\n    //declaration of functions \n    double defaultPrice();\n    double priceFor(Visitor visitor);\n}\n\n\n==+==\nFILE: IReviewed.java\n==+==\n\n//declaring ireviewed interface\npublic interface IReviewed{\n    int getRating();\n    String getName();\n}\n\n\n==+==\nFILE: ThemePark.java\n==+==\n\nimport java.util.Scanner;\n\npublic class ThemePark{\n    //calling menu in the themepark.\n    public void menu()\n    {\n    //getting the visitor age, height and money uisng scanner class.\n    Scanner scanner = new Scanner(System.in);\n    System.out.println(\"Welcome to the amusement park dear visitor, I am going to ask you few questions\");\n    System.out.println(\"what is your age?\");\n    int age = scanner.nextInt();\n    scanner.nextLine();\n\n    System.out.println(\"What is your height in cm?\");\n    int height = scanner.nextInt();\n    scanner.nextLine();\n    System.out.println(\"How much money are you going to spend in the park today?\");\n    int money = scanner.nextInt();\n\n    // creating visitr object using the value given by the user\n    Visitor visitor = new Visitor(age, height,money);\n\n    //object declarations of multiple attractions\n    Rollercoaster r2 = new Rollercoaster(\"Screaming Eagle\", 0);\n    Dodgems d1 = new Dodgems(\"Dodgem of Doom\", 0);\n    Park p1= new  Park(\"park Lagoon\", 0);\n    Playground playground = new Playground(\"playground Tsunami\", 0);\n\n    // lets create file to loop into the menu.\n    boolean flag = true;\n    while (flag)\n    {\n\n        System.out.println(\"1. Ride roller coaster\");\n        System.out.println(\"2. Ride dodgem\");\n        System.out.println(\"3. Visit park (its free)\");\n        System.out.println(\"4. Visit playground\");\n        System.out.println(\"5. visit candy floss stall\");\n        System.out.println(\"6. Visit tobacco stall\");\n        System.out.println(\"7. Visit Icecream Stall\");\n        System.out.println(\"8.Display all visited stalls and attractions and exit\");\n        System.out.println(\"enter choice\");\n        int choice = scanner.nextInt();        \n\n        switch (choice){\n            case 1:\n            {\n                System.out.println(\"welcome to screaming eagle \\n --------------------- \\n\" +\n                \"checking your age and height\");\n                if (r2.isAllowedTo(visitor))\n                {\n                    System.out.println(\" Riding roller coaster..... \\n\"+\n                    \" you have now completed riding please rate the ride and screaming eagle\");\n                    int rating= scanner.nextInt();\n                    r2.rating = rating;\n                    visitor.money -= r2.priceFor(visitor); // subtract money spended\n                    visitor.addVisited(r2);\n                    r2.addVisit();\n                    visitor.incVisited();\n                    if(visitor.money<=0){\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                            System.exit(1);\n                    }\n                    else\n                    {\n                         System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                    }\n                      System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                      char answer = scanner.next(\".\").charAt(0);\n                      if (answer=='y'|| answer =='Y'){\n                        continue;\n                      }\n                      else{\n                        flag =false;\n                        break;\n                      }\n\n\n\n\n                }\n                else{\n                     System.out.println(\"Not allowed to ride the roller coaster...Please choose another option\");\n                    break;\n                }\n \n            }\n\n            case 2:\n            {\n                System.out.println(\"WELCOME TO DODGEM RIDE OF DOOM!\\n------------------------------\");\n                    System.out.println(\"Riding Dodgem...\\n\" +\n                            \"You are done with the ride, what rating do you give the Dodgem of Doom?\");\n                            int rating = scanner.nextInt();\n                            d1.rating=rating;\n                    visitor.money -= d1.priceFor(visitor);\n                    visitor.addVisited(d1);\n                    d1.addVisit();\n                    visitor.incVisited();\n                     if (visitor.money <= 0) {\n                        System.out.println(\"Not enough money left! See customer service for reparations!\");\n                    }\n                    else {\n                        System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n                    }\n\n                     System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                     if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n            }\n\n            case 3:\n            {\n                 //Park option, No restrictions\n                    System.out.println(\"Welcome to Park Lagoon! Everyone is welcome here for free!\\n------------------------------\");\n                    System.out.println(\"After your visit please give the park a rating: \");\n                    int rating = scanner.nextInt();\n                     scanner.nextLine();\n                    p1.rating = rating;\n                    visitor.addVisited(p1);\n                    p1.addVisit();\n                    visitor.incVisited();\n                    System.out.println(\"Would you like to visit another attraction or stall?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n            }\n\n\n            case 4:\n            {\n                //Playground option implements ISecurity. Max age of 15\n                    System.out.println(\"Welcome to Playground Tsunami you must be 15 years or older so we will check your age...\");\n                    if (playground.isAllowedTo(visitor)) { //If they are of age, they are allowed to enter the playground\n                        visitor.addVisited(playground);\n                        playground.addVisit();\n                        visitor.incVisited();\n                        System.out.println(\"You are old enough! after you are done please give the play ground a rating: \");\n                        playground.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                         if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //If they are too old, break and keep menu going\n                        System.out.println(\"You are too old to enter the playground!\");\n                        break;\n                    }\n\n            }\n\n\n            case 5:\n            {\n                //CandyFloss Stall, implements ISecurity. Must be 18 or older\n                    System.out.println(\"Welcome to the candy floss stall! you must be 18 years or older to visit this stall. Checking....\");\n                    //CandyFloss object declaration\n                      CandyFlossStall candyFlossStall = new CandyFlossStall(\"CandyFloss\", \"Rakish\", 0, 0);\n                    if (candyFlossStall.isAllowedTo(visitor)) { //If above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the candy floss stall a rating: \");\n                        candyFlossStall.rating = scanner.nextInt();\n                        scanner.nextLine();\n                         System.out.println(\"What is your parking spot?\");\n                        candyFlossStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(candyFlossStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                         char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                        }\n                         } else { //if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n\n            }\n\n            case 6:{\n                //Tobacco Stall option, implements ISecurity. Must be 18 years or older\n                    System.out.println(\"Welcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\");\n                    //Tobacco stall object declaration\n                    TobaccoStall tobaccoStall = new TobaccoStall(\"Good Smokes\", \"Mohammad\", 0, 0);\n                      if (tobaccoStall.isAllowedTo(visitor)) { //if above 18, get rating and parking spot\n                        System.out.println(\"You are old enough! after you are done please give the tobacco shop a rating: \");\n                        tobaccoStall.rating = scanner.nextInt();\n                          System.out.println(\"What is your parking spot?\");\n                        tobaccoStall.parkingSpot = scanner.nextInt();\n                        scanner.nextLine();\n                        visitor.addStall(tobaccoStall);\n                        System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                        char answer = scanner.next(\".\").charAt(0);\n                        if (answer == 'Y' || answer == 'y') {\n                            continue;\n                        } else {\n                            flag = false;\n                            break;\n                        }\n                         }else{//if under 18, end program. send to jail.\n                        System.out.println(\"You are not old enough... escorting to security\");\n                        flag = false;\n                        break;\n                    }\n                    \n            }\n\n              case 7: { //Ice cream Stall, no restrictions\n                    System.out.println(\"Welcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\");\n                    System.out.println(\"Please give the ice cream stall a rating: \"); //get rating\n                    int rating = scanner.nextInt();\n                    scanner.nextLine();\n                    System.out.println(\"What is your parking spot?\"); //get parking spot\n                    int parkingSpot = scanner.nextInt();\n                    scanner.nextLine();\n                    //Ice cream stall object declaration\n                    IceCreamStall iceCreamStall = new IceCreamStall(\"Frozen World\", \"Dean\", rating, parkingSpot);\n                    visitor.addStall(iceCreamStall);\n                    System.out.println(\"Would you like to visit another attraction or stall/print details before leaving?(Y/N)\");\n                    char answer = scanner.next(\".\").charAt(0);\n                    if (answer == 'Y' || answer == 'y') {\n                        continue;\n                    } else {\n                        flag = false;\n                        break;\n                    }\n\n\n                }\n\n                  case 8: { //Option for displaying all visited attractions and stalls and ending program\n                    System.out.println(\"Printing all attractions and stalls visited...\\n\");\n                    System.out.println(visitor.toString());\n                    System.out.println(\"Total attractions visited: \" + visitor.getTotalAttractions());\n                    System.out.println(\"you have \" + visitor.money + \" Dollars left\");\n\n                }\n\n\n\n        }\n\n\n\n    }\n\n\n\n\n    }\n}\n","codeExecutionHistory":{"2023-07-17T10:46:12.093Z":1,"2023-07-17T10:47:18.285Z":1,"2023-07-17T10:47:35.079Z":3,"2023-07-17T10:47:55.175Z":1,"2023-07-17T10:49:50.451Z":3,"2023-07-17T10:50:25.522Z":3,"2023-07-17T10:52:09.155Z":3,"2023-07-17T11:00:47.479Z":3,"2023-07-17T11:02:33.972Z":3,"2023-07-17T11:02:36.353Z":3,"2023-07-17T11:02:41.585Z":3,"2023-07-17T11:12:23.127Z":1,"2023-07-17T11:15:11.117Z":1,"2023-07-17T11:15:27.671Z":1,"2023-07-17T11:18:25.101Z":1,"2023-07-17T11:20:06.515Z":1,"2023-07-17T11:20:30.874Z":1,"2023-07-17T11:22:09.846Z":1,"2023-07-17T11:22:33.304Z":1,"2023-07-17T11:23:39.601Z":3,"2023-07-17T11:27:47.817Z":1,"2023-07-17T11:28:08.234Z":1,"2023-07-17T11:28:12.380Z":1,"2023-07-17T11:28:15.357Z":1,"2023-07-17T11:28:17.505Z":1,"2023-07-17T11:28:19.947Z":1,"2023-07-17T11:28:21.819Z":1,"2023-07-17T11:28:44.033Z":1,"2023-07-17T11:29:20.359Z":1,"2023-07-17T11:29:44.547Z":1,"2023-07-17T11:30:06.739Z":1,"2023-07-17T11:32:10.817Z":1,"2023-07-17T11:32:27.002Z":3,"2023-07-17T12:35:52.848Z":1,"2023-07-17T12:36:28.157Z":1,"2023-07-17T12:36:30.872Z":1,"2023-07-17T12:37:41.974Z":1,"2023-07-17T12:38:42.879Z":1,"2023-07-17T12:38:49.202Z":1,"2023-07-17T12:39:02.695Z":3,"2023-07-17T12:39:54.798Z":1,"2023-07-17T12:40:28.371Z":1,"2023-07-17T12:40:33.082Z":1,"2023-07-17T12:40:35.879Z":1,"2023-07-17T12:42:04.771Z":3,"2023-07-17T12:43:25.288Z":1,"2023-07-17T13:14:50.020Z":1,"2023-07-17T13:15:11.911Z":3,"2023-07-18T13:48:10.516Z":1,"2023-07-18T13:48:45.833Z":1,"2023-07-18T13:48:47.508Z":1,"2023-07-18T14:23:29.023Z":1,"2023-07-18T14:23:42.502Z":1,"2023-07-18T14:23:46.016Z":1,"2023-07-18T15:24:59.188Z":1,"2023-07-18T15:25:12.002Z":1,"2023-07-18T15:30:01.463Z":1,"2023-07-18T15:33:11.400Z":1,"2023-07-19T11:40:06.930Z":1,"2023-07-19T11:42:35.946Z":1,"2023-07-19T11:43:06.297Z":1,"2023-07-19T11:44:13.081Z":1,"2023-07-19T11:47:07.812Z":1,"2023-07-19T11:52:08.454Z":1,"2023-09-06T11:47:05.812Z":6,"2023-09-06T11:48:49.442Z":6,"2023-09-06T11:49:09.000Z":6,"2023-09-06T11:49:30.560Z":6,"2023-09-06T11:50:07.070Z":6,"2023-09-06T11:51:45.299Z":6,"2023-09-06T11:52:17.007Z":6,"2023-09-06T11:53:59.491Z":6,"2023-09-06T11:54:15.647Z":6,"2023-09-06T11:57:14.512Z":6,"2023-09-06T11:58:14.413Z":6,"2023-09-06T11:59:33.409Z":6,"2023-09-06T12:00:45.644Z":6,"2023-09-06T12:00:53.067Z":6,"2023-09-06T12:01:12.798Z":6,"2023-09-06T12:02:25.854Z":6,"2023-09-06T12:03:21.761Z":6,"2023-09-06T12:08:53.085Z":6,"2023-09-06T12:10:25.602Z":6,"2023-09-06T12:10:49.671Z":6,"2023-09-06T12:11:03.968Z":6,"2023-09-06T12:11:09.338Z":6,"2023-09-06T12:11:58.993Z":6,"2023-09-06T12:12:14.612Z":6,"2023-09-06T12:12:33.079Z":6,"2023-09-06T12:12:48.099Z":6,"2023-09-06T12:12:54.101Z":6,"2023-09-06T12:14:23.840Z":6,"2023-09-06T12:15:40.228Z":6,"2023-09-06T12:16:07.320Z":6,"2023-09-06T12:16:12.548Z":6,"2023-09-06T12:17:08.446Z":6,"2023-09-06T12:21:13.534Z":6,"2023-09-06T12:21:41.449Z":6,"2023-09-06T12:23:05.050Z":6,"2023-09-06T12:23:52.449Z":6,"2023-09-06T12:24:13.504Z":6,"2023-09-06T12:27:27.975Z":6,"2023-09-06T12:29:04.279Z":6,"2023-09-06T12:29:32.697Z":6,"2023-09-06T12:29:47.846Z":6,"2023-09-06T12:29:54.016Z":6,"2023-09-06T12:30:28.077Z":6,"2023-09-06T12:50:05.389Z":6,"2023-09-06T12:50:17.639Z":6,"2023-09-06T12:52:05.404Z":6,"2023-09-06T12:52:11.561Z":6,"2023-09-06T12:52:39.708Z":6,"2023-09-06T12:53:21.064Z":6,"2023-09-06T12:53:47.760Z":6,"2023-09-06T12:53:51.643Z":6,"2023-09-06T12:55:20.966Z":6,"2023-09-06T12:56:31.774Z":6,"2023-09-06T12:56:43.077Z":6,"2023-09-06T12:57:24.053Z":6,"2023-09-06T12:57:48.409Z":6,"2023-09-06T12:57:52.664Z":6,"2023-09-06T12:58:10.378Z":6,"2023-09-06T12:59:30.371Z":6,"2023-09-06T13:07:02.044Z":6,"2023-09-06T13:07:15.767Z":6,"2023-09-06T13:07:23.112Z":6,"2023-09-06T13:07:46.830Z":6,"2023-09-06T13:08:28.048Z":6,"2023-09-06T13:14:57.796Z":6,"2023-09-06T13:17:17.625Z":6,"2023-09-06T13:17:22.109Z":6,"2023-09-06T13:17:58.637Z":6,"2023-09-06T13:18:50.601Z":6,"2023-09-06T13:19:08.809Z":6,"2023-09-06T13:19:21.750Z":6,"2023-09-06T13:19:30.471Z":6,"2023-09-06T13:19:37.639Z":6,"2023-09-06T13:19:58.006Z":6,"2023-09-06T13:21:23.515Z":6,"2023-09-06T13:21:54.538Z":6,"2023-09-06T13:23:40.014Z":6,"2023-09-06T13:23:54.704Z":6,"2023-09-06T13:26:00.288Z":6,"2023-09-06T13:28:39.842Z":6,"2023-09-06T13:29:05.956Z":6,"2023-09-06T13:29:27.314Z":6,"2023-09-06T13:32:20.289Z":6,"2023-09-06T13:34:17.947Z":6,"2023-09-06T13:34:34.725Z":6,"2023-09-06T13:48:53.389Z":11,"2023-09-06T13:55:39.596Z":6,"2023-09-06T13:55:45.136Z":6,"2023-09-06T13:55:50.764Z":6,"2023-09-06T13:57:18.315Z":11,"2023-09-06T13:58:40.940Z":11,"2023-09-06T13:58:53.666Z":11,"2023-09-06T13:59:10.590Z":11,"2023-09-06T13:59:25.444Z":11,"2023-09-06T14:01:42.115Z":11,"2023-09-06T14:01:51.310Z":3,"2023-09-06T14:02:38.830Z":11,"2023-09-06T14:03:19.272Z":11,"2023-09-06T14:03:37.929Z":11,"2023-09-06T14:03:43.791Z":3,"2023-09-06T14:04:22.243Z":11,"2023-09-06T14:04:33.005Z":3,"2023-09-06T14:04:56.131Z":11,"2023-09-06T14:05:18.770Z":11,"2023-09-06T14:05:29.700Z":11,"2023-09-06T14:05:45.989Z":11,"2023-09-06T14:05:52.162Z":11,"2023-09-06T14:06:22.362Z":11,"2023-09-06T14:06:27.545Z":11,"2023-09-06T14:06:35.366Z":11,"2023-09-06T14:06:42.595Z":11,"2023-09-06T14:07:27.224Z":3,"2023-09-06T14:07:43.253Z":11,"2023-09-06T14:08:32.567Z":11,"2023-09-06T14:08:37.885Z":11,"2023-09-06T14:09:33.342Z":3,"2023-09-06T14:10:01.479Z":11,"2023-09-06T14:11:55.777Z":11,"2023-09-06T14:12:39.193Z":11,"2023-09-06T14:12:54.712Z":11,"2023-09-06T14:13:54.540Z":3,"2023-09-06T14:14:37.266Z":11,"2023-09-06T14:15:13.273Z":11,"2023-09-06T14:15:25.050Z":11,"2023-09-06T14:15:53.204Z":11,"2023-09-06T14:15:57.585Z":3,"2023-09-06T14:16:21.988Z":3,"2023-09-06T14:16:35.733Z":3,"2023-09-06T14:16:58.205Z":11,"2023-09-06T14:17:19.571Z":11,"2023-09-06T14:17:32.781Z":11,"2023-09-06T14:17:38.113Z":11,"2023-09-06T14:18:06.970Z":11,"2023-09-06T14:19:02.635Z":3,"2023-09-06T14:19:41.032Z":3,"2023-09-06T14:20:00.825Z":3,"2023-09-06T14:20:17.343Z":3,"2023-09-06T14:20:33.636Z":3,"2023-09-06T14:20:45.135Z":3,"2023-09-06T14:20:54.452Z":3,"2023-09-06T14:22:24.691Z":3,"2023-09-06T14:22:50.692Z":3,"2023-09-06T14:24:13.074Z":11,"2023-09-06T14:24:21.351Z":11,"2023-09-06T14:24:35.632Z":11,"2023-09-06T14:24:50.772Z":11,"2023-09-06T14:27:17.903Z":3},"documentUUID":"2023-07-17-16-26_CMPSCI2261_dc18106d-2030-4e75-a254-151abf5b8cc4","deletionToken":"2023-07-17-16-26_CMPSCI2261_715460df-cf18-4b46-83d1-17b8780e09d8","dashboardAccessToken":"2023-07-17-16-26_CMPSCI2261_99a69eb9-b01f-4166-b550-9fcee3556f36","codeExecutionOutput":{"2023-09-06T11:47:05.812Z":"null","2023-09-06T11:48:49.442Z":"null","2023-09-06T11:49:09.000Z":"null","2023-09-06T11:49:30.560Z":"null","2023-09-06T11:50:07.070Z":"null","2023-09-06T11:51:45.299Z":"null","2023-09-06T11:52:17.007Z":"null","2023-09-06T11:53:59.491Z":"null","2023-09-06T11:54:15.647Z":"null","2023-09-06T11:57:14.512Z":"null","2023-09-06T11:58:14.413Z":"null","2023-09-06T11:59:33.409Z":"null","2023-09-06T12:00:45.644Z":"null","2023-09-06T12:00:53.067Z":"null","2023-09-06T12:01:12.798Z":"null","2023-09-06T12:02:25.854Z":"null","2023-09-06T12:03:21.761Z":"null","2023-09-06T12:08:53.085Z":"null","2023-09-06T12:10:25.602Z":"null","2023-09-06T12:10:49.671Z":"null","2023-09-06T12:11:03.968Z":"null","2023-09-06T12:11:09.338Z":"null","2023-09-06T12:11:58.993Z":"null","2023-09-06T12:12:14.612Z":"null","2023-09-06T12:12:33.079Z":"null","2023-09-06T12:12:48.099Z":"null","2023-09-06T12:12:54.101Z":"null","2023-09-06T12:14:23.840Z":"null","2023-09-06T12:15:40.228Z":"null","2023-09-06T12:16:07.320Z":"null","2023-09-06T12:16:12.548Z":"null","2023-09-06T12:17:08.446Z":"null","2023-09-06T12:21:13.534Z":"null","2023-09-06T12:21:41.449Z":"null","2023-09-06T12:23:05.050Z":"null","2023-09-06T12:23:52.449Z":"null","2023-09-06T12:24:13.504Z":"null","2023-09-06T12:27:27.975Z":"null","2023-09-06T12:29:04.279Z":"null","2023-09-06T12:29:32.697Z":"null","2023-09-06T12:29:47.846Z":"null","2023-09-06T12:29:54.016Z":"null","2023-09-06T12:30:28.077Z":"null","2023-09-06T12:50:05.389Z":"null","2023-09-06T12:50:17.639Z":"null","2023-09-06T12:52:05.404Z":"null","2023-09-06T12:52:11.561Z":"null","2023-09-06T12:52:39.708Z":"null","2023-09-06T12:53:21.064Z":"null","2023-09-06T12:53:47.760Z":"null","2023-09-06T12:53:51.643Z":"null","2023-09-06T12:55:20.966Z":"null","2023-09-06T12:56:31.774Z":"null","2023-09-06T12:56:43.077Z":"null","2023-09-06T12:57:24.053Z":"null","2023-09-06T12:57:48.409Z":"null","2023-09-06T12:57:52.664Z":"null","2023-09-06T12:58:10.378Z":"null","2023-09-06T12:59:30.371Z":"null","2023-09-06T13:07:02.044Z":"null","2023-09-06T13:07:15.767Z":"null","2023-09-06T13:07:23.112Z":"null","2023-09-06T13:07:46.830Z":"null","2023-09-06T13:08:28.048Z":"null","2023-09-06T13:14:57.796Z":"null","2023-09-06T13:17:17.625Z":"null","2023-09-06T13:17:22.109Z":"null","2023-09-06T13:17:58.637Z":"null","2023-09-06T13:18:50.601Z":"null","2023-09-06T13:19:08.809Z":"null","2023-09-06T13:19:21.750Z":"null","2023-09-06T13:19:30.471Z":"null","2023-09-06T13:19:37.639Z":"null","2023-09-06T13:19:58.006Z":"null","2023-09-06T13:21:23.515Z":"null","2023-09-06T13:21:54.538Z":"null","2023-09-06T13:23:40.014Z":"null","2023-09-06T13:23:54.704Z":"null","2023-09-06T13:26:00.288Z":"null","2023-09-06T13:28:39.842Z":"null","2023-09-06T13:29:05.956Z":"null","2023-09-06T13:29:27.314Z":"null","2023-09-06T13:32:20.289Z":"null","2023-09-06T13:34:17.947Z":"null","2023-09-06T13:34:34.725Z":"null","2023-09-06T13:48:53.389Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T13:55:39.596Z":"null","2023-09-06T13:55:45.136Z":"null","2023-09-06T13:55:50.764Z":"null","2023-09-06T13:57:18.315Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T13:58:40.940Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:15)\n\tat Main.main(Main.java:5)\n","2023-09-06T13:58:53.666Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:15)\n\tat Main.main(Main.java:5)\n","2023-09-06T13:59:10.590Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:15)\n\tat Main.main(Main.java:5)\n","2023-09-06T13:59:25.444Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:15)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:01:42.115Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:15)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:01:51.310Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are not old enough... escorting to security\n","2023-09-06T14:02:38.830Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:204)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:03:19.272Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:204)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:03:37.929Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:204)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:03:43.791Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are not old enough... escorting to security\n","2023-09-06T14:04:22.243Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:204)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:04:33.005Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are not old enough... escorting to security\n","2023-09-06T14:04:56.131Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:05:18.770Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:05:29.700Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:05:45.989Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:05:52.162Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:06:22.362Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:06:27.545Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:06:35.366Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:06:42.595Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:07:27.224Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are not old enough... escorting to security\n","2023-09-06T14:07:43.253Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:204)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:08:32.567Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:08:37.885Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:09:33.342Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:10:01.479Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:11:55.777Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:12:39.193Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:176)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:12:54.712Z":"Exception in thread \"main\" java.util.NoSuchElementException: No line found\n\tat java.base/java.util.Scanner.nextLine(Scanner.java:1651)\n\tat ThemePark.menu(ThemePark.java:177)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:13:54.540Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:14:37.266Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:15:13.273Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:15:25.050Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:15:53.204Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:15:57.585Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:16:21.988Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:16:35.733Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:16:58.205Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:17:19.571Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:17:32.781Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:17:38.113Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:18:06.970Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:19:02.635Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:19:41.032Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:20:00.825Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:20:17.343Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:20:33.636Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:20:45.135Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the ice cream stall Frozen World! everyone is old enough to visit this stall\nPlease give the ice cream stall a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:20:54.452Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:22:24.691Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:22:50.692Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n","2023-09-06T14:24:13.074Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:24:21.351Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:204)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:24:35.632Z":"Exception in thread \"main\" java.util.InputMismatchException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:204)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:24:50.772Z":"Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.Scanner.throwFor(Scanner.java:937)\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\n\tat ThemePark.menu(ThemePark.java:43)\n\tat Main.main(Main.java:5)\n","2023-09-06T14:27:17.903Z":"Welcome to the amusement park dear visitor, I am going to ask you few questions\nwhat is your age?\nWhat is your height in cm?\nHow much money are you going to spend in the park today?\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\n1. Ride roller coaster\n2. Ride dodgem\n3. Visit park (its free)\n4. Visit playground\n5. visit candy floss stall\n6. Visit tobacco stall\n7. Visit Icecream Stall\n8.Display all visited stalls and attractions and exit\nenter choice\nWelcome to the tobacco shop Good Smokes!you must be 18 years or older to visit this stall. checking....\nYou are old enough! after you are done please give the tobacco shop a rating: \nWhat is your parking spot?\nWould you like to visit another attraction or stall/print details before leaving?(Y/N)\n"},"customInput":"19\n134\n11\n6\n5\n4\ny\n19\n134\n11\n6\n1\n5\nn\n8\n","uuid":"2023-09-06-20-43_21c3e544-9a4e-456d-8cb7-2d4ffbc7ee45"},"required":["documentVersion","formType"],"ignoreEncryptDecrypt":true}