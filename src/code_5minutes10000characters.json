{"documentVersion": "1.0", "formType": "code", "language": "en", "codeLanguage": "", "questionPresentFlag": false, "encryptionFlag": true, "compressionFlag": false, "expiryDate": "2023-10-30T12:49:40.139Z", "question": "", "author": "", "title": "", "initialTimeStamp": "2023-05-10T20:38:10.433Z", "finalTimeStamp": "2023-05-10T20:43:05.433Z", "minimumLoggingInterval": 5000, "answerVersions": {"2023-05-10T20:38:10.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE ", "2023-05-10T20:38:15.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpgg", "2023-05-10T20:38:20.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setu", "2023-05-10T20:38:27.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background c", "2023-05-10T20:38:35.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place c", "2023-05-10T20:38:40.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # di", "2023-05-10T20:38:45.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n   ", "2023-05-10T20:38:50.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle =", "2023-05-10T20:38:55.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_ca", "2023-05-10T20:39:00.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_can", "2023-05-10T20:39:14.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, ro", "2023-05-10T20:39:19.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()),", "2023-05-10T20:39:26.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainlo", "2023-05-10T20:39:31.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloo", "2023-05-10T20:39:42.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(data", "2023-05-10T20:40:04.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invo", "2023-05-10T20:40:09.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataf", "2023-05-10T20:40:24.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_datafr", "2023-05-10T20:40:29.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoi", "2023-05-10T20:40:38.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoic", "2023-05-10T20:40:43.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start", "2023-05-10T20:40:51.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width", "2023-05-10T20:40:59.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height", "2023-05-10T20:41:04.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mod", "2023-05-10T20:41:09.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((41", "2023-05-10T20:41:29.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoi", "2023-05-10T20:41:34.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoic", "2023-05-10T20:41:48.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(f", "2023-05-10T20:41:54.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(fo", "2023-05-10T20:41:59.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(fon", "2023-05-10T20:42:04.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n    ", "2023-05-10T20:42:18.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dro", "2023-05-10T20:42:33.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_drop", "2023-05-10T20:42:38.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *", "2023-05-10T20:42:53.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *'", "2023-05-10T20:43:00.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=", "2023-05-10T20:43:05.433Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=r</p>"}, "answer": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=r</p>", "codeExecutionHistory": {}, "ignoreEncryptDecrypt": true}