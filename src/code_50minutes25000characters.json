{"documentVersion": "1.0", "formType": "code", "language": "en", "codeLanguage": "", "questionPresentFlag": false, "encryptionFlag": true, "compressionFlag": false, "expiryDate": "2023-10-30T12:49:40.139Z", "question": "", "author": "", "title": "", "initialTimeStamp": "2023-10-16T16:53:43.104Z", "finalTimeStamp": "2023-10-16T17:43:41.104Z", "minimumLoggingInterval": 5000, "answerVersions": {"2023-10-16T16:53:43.104Z": "\"\"\"\nauthor: Mi", "2023-10-16T16:53:48.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import She", "2023-10-16T16:53:53.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter i", "2023-10-16T16:53:58.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE =", "2023-10-16T16:54:09.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = ", "2023-10-16T16:54:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Gou", "2023-10-16T16:54:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goud", "2023-10-16T16:54:44.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy", "2023-10-16T16:54:49.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ", "2023-10-16T16:54:54.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf", "2023-10-16T16:55:02.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal va", "2023-10-16T16:55:09.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal var", "2023-10-16T16:55:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal vari", "2023-10-16T16:55:19.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated ", "2023-10-16T16:55:24.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"", "2023-10-16T16:55:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen ", "2023-10-16T16:55:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # se", "2023-10-16T16:55:48.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen informa", "2023-10-16T16:55:53.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen informat", "2023-10-16T16:56:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen informati", "2023-10-16T16:56:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen informatio", "2023-10-16T16:56:27.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = ", "2023-10-16T16:56:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting ", "2023-10-16T16:56:48.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting t", "2023-10-16T16:56:54.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the scree", "2023-10-16T16:56:59.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # ", "2023-10-16T16:57:04.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authent", "2023-10-16T16:57:09.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenti", "2023-10-16T16:57:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to ", "2023-10-16T16:57:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas ", "2023-10-16T16:57:31.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = ", "2023-10-16T16:57:51.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = t", "2023-10-16T16:58:03.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_", "2023-10-16T16:58:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    l", "2023-10-16T16:58:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round(", "2023-10-16T16:58:21.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((", "2023-10-16T16:58:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    ", "2023-10-16T16:58:31.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_W", "2023-10-16T16:58:55.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WH", "2023-10-16T16:59:00.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center'", "2023-10-16T16:59:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4z", "2023-10-16T16:59:10.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, ", "2023-10-16T16:59:15.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, r", "2023-10-16T16:59:20.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, ro", "2023-10-16T16:59:29.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.", "2023-10-16T16:59:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing t", "2023-10-16T16:59:44.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, ro", "2023-10-16T16:59:49.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, rou", "2023-10-16T16:59:58.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation ce", "2023-10-16T17:00:03.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = t", "2023-10-16T17:00:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_c", "2023-10-16T17:00:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45", "2023-10-16T17:00:18.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45,", "2023-10-16T17:00:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and", "2023-10-16T17:00:44.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n", "2023-10-16T17:00:49.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen", "2023-10-16T17:01:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    #", "2023-10-16T17:01:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # ", "2023-10-16T17:01:30.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, ", "2023-10-16T17:01:35.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center'", "2023-10-16T17:01:40.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')", "2023-10-16T17:01:52.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_fi", "2023-10-16T17:02:00.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely", "2023-10-16T17:02:06.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=", "2023-10-16T17:02:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n   ", "2023-10-16T17:02:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    passwo", "2023-10-16T17:02:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, an", "2023-10-16T17:02:27.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anc", "2023-10-16T17:02:32.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(f", "2023-10-16T17:02:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(fo", "2023-10-16T17:02:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, an", "2023-10-16T17:03:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anc", "2023-10-16T17:03:24.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the logi", "2023-10-16T17:03:29.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/10", "2023-10-16T17:03:41.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(", "2023-10-16T17:03:46.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(a", "2023-10-16T17:03:51.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(au", "2023-10-16T17:03:56.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(aut", "2023-10-16T17:04:01.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(auth", "2023-10-16T17:04:06.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, userna", "2023-10-16T17:04:11.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, usernam", "2023-10-16T17:04:16.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(a", "2023-10-16T17:04:21.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely", "2023-10-16T17:04:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n ", "2023-10-16T17:04:31.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n", "2023-10-16T17:04:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in author", "2023-10-16T17:04:44.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).deco", "2023-10-16T17:05:00.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decod", "2023-10-16T17:05:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode", "2023-10-16T17:05:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode(", "2023-10-16T17:05:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode()", "2023-10-16T17:05:51.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_sc", "2023-10-16T17:05:56.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                templa", "2023-10-16T17:06:01.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                templat", "2023-10-16T17:06:18.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = i", "2023-10-16T17:06:24.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = in", "2023-10-16T17:06:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = inv", "2023-10-16T17:06:44.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox", "2023-10-16T17:06:49.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('N", "2023-10-16T17:06:54.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the U", "2023-10-16T17:06:59.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table", "2023-10-16T17:07:04.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.re", "2023-10-16T17:07:09.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe", "2023-10-16T17:07:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dat", "2023-10-16T17:07:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n  ", "2023-10-16T17:07:33.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual", "2023-10-16T17:07:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to th", "2023-10-16T17:07:55.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': act", "2023-10-16T17:08:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actua", "2023-10-16T17:08:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual", "2023-10-16T17:08:19.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_", "2023-10-16T17:08:35.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n ", "2023-10-16T17:08:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n ", "2023-10-16T17:08:48.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary ", "2023-10-16T17:08:53.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we conca", "2023-10-16T17:09:03.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignor", "2023-10-16T17:09:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everyt", "2023-10-16T17:09:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.wi", "2023-10-16T17:09:24.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_scr", "2023-10-16T17:09:37.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n ", "2023-10-16T17:09:42.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n  ", "2023-10-16T17:09:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authentica", "2023-10-16T17:10:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_c", "2023-10-16T17:10:10.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # settin", "2023-10-16T17:10:15.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting", "2023-10-16T17:10:24.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canv", "2023-10-16T17:10:29.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height", "2023-10-16T17:10:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor=", "2023-10-16T17:10:46.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placin", "2023-10-16T17:10:51.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing", "2023-10-16T17:11:07.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing ", "2023-10-16T17:11:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main ", "2023-10-16T17:11:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main e", "2023-10-16T17:11:35.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end but", "2023-10-16T17:11:40.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font", "2023-10-16T17:11:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                        ", "2023-10-16T17:11:58.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         ", "2023-10-16T17:12:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_functi", "2023-10-16T17:12:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(", "2023-10-16T17:12:35.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.he", "2023-10-16T17:12:40.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.hei", "2023-10-16T17:12:45.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_", "2023-10-16T17:12:50.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GRE", "2023-10-16T17:12:55.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREY", "2023-10-16T17:13:00.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYI", "2023-10-16T17:13:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYIS", "2023-10-16T17:13:10.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH", "2023-10-16T17:13:16.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n     ", "2023-10-16T17:13:28.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(locat", "2023-10-16T17:13:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page", "2023-10-16T17:13:44.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page ", "2023-10-16T17:13:59.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster", "2023-10-16T17:14:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster ", "2023-10-16T17:14:33.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster i", "2023-10-16T17:14:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster im", "2023-10-16T17:14:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pix", "2023-10-16T17:14:48.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode,", "2023-10-16T17:14:59.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.sam", "2023-10-16T17:15:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that wa", "2023-10-16T17:15:29.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was", "2023-10-16T17:15:34.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in diffe", "2023-10-16T17:16:01.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in differ", "2023-10-16T17:16:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in differ", "2023-10-16T17:16:28.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different sc", "2023-10-16T17:16:33.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different scr", "2023-10-16T17:16:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.wi", "2023-10-16T17:16:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.widt", "2023-10-16T17:17:11.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template", "2023-10-16T17:17:16.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='cen", "2023-10-16T17:17:21.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getti", "2023-10-16T17:17:31.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the pa", "2023-10-16T17:17:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read", "2023-10-16T17:18:03.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_de", "2023-10-16T17:18:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n", "2023-10-16T17:18:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n ", "2023-10-16T17:18:42.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting t", "2023-10-16T17:19:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan va", "2023-10-16T17:19:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n               ", "2023-10-16T17:19:32.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['", "2023-10-16T17:19:37.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['I", "2023-10-16T17:19:42.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['In", "2023-10-16T17:19:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen),", "2023-10-16T17:19:52.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), ", "2023-10-16T17:19:57.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/108", "2023-10-16T17:20:11.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080", "2023-10-16T17:20:16.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))", "2023-10-16T17:20:35.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_scr", "2023-10-16T17:20:57.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n           ", "2023-10-16T17:21:02.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"1", "2023-10-16T17:21:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ", "2023-10-16T17:21:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]", "2023-10-16T17:21:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  #", "2023-10-16T17:21:52.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, va", "2023-10-16T17:21:57.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n      ", "2023-10-16T17:22:02.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label", "2023-10-16T17:22:07.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.", "2023-10-16T17:22:15.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.h", "2023-10-16T17:22:20.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.he", "2023-10-16T17:22:25.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_n", "2023-10-16T17:22:59.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=ro", "2023-10-16T17:23:16.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=rou", "2023-10-16T17:23:21.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, ", "2023-10-16T17:23:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n       ", "2023-10-16T17:23:42.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(inv", "2023-10-16T17:23:53.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invo", "2023-10-16T17:23:58.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.heigh", "2023-10-16T17:24:06.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.", "2023-10-16T17:24:11.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table compone", "2023-10-16T17:24:16.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table componen", "2023-10-16T17:24:21.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720", "2023-10-16T17:24:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        fr", "2023-10-16T17:24:31.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        fra", "2023-10-16T17:24:36.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        he", "2023-10-16T17:25:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sh", "2023-10-16T17:25:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n       ", "2023-10-16T17:25:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DAR", "2023-10-16T17:25:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n              ", "2023-10-16T17:25:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    d", "2023-10-16T17:25:48.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    m", "2023-10-16T17:26:02.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_scr", "2023-10-16T17:26:07.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_s", "2023-10-16T17:26:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n              ", "2023-10-16T17:26:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_scre", "2023-10-16T17:26:27.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollba", "2023-10-16T17:26:35.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n ", "2023-10-16T17:26:46.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n  ", "2023-10-16T17:26:51.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n  ", "2023-10-16T17:26:57.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n           ", "2023-10-16T17:27:02.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n            ", "2023-10-16T17:27:07.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table", "2023-10-16T17:27:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WH", "2023-10-16T17:27:17.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHI", "2023-10-16T17:27:22.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n     ", "2023-10-16T17:27:27.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n  ", "2023-10-16T17:27:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n       ", "2023-10-16T17:27:43.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        ", "2023-10-16T17:27:54.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(colu", "2023-10-16T17:28:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(colum", "2023-10-16T17:28:37.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n  ", "2023-10-16T17:28:42.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n   ", "2023-10-16T17:28:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n    ", "2023-10-16T17:28:52.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n     ", "2023-10-16T17:28:57.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer", "2023-10-16T17:29:02.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, ro", "2023-10-16T17:29:07.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, rou", "2023-10-16T17:29:24.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, roun", "2023-10-16T17:29:29.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, ", "2023-10-16T17:29:34.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, r", "2023-10-16T17:29:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer mess", "2023-10-16T17:29:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(fon", "2023-10-16T17:29:53.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font", "2023-10-16T17:29:58.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font,", "2023-10-16T17:30:03.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.p", "2023-10-16T17:30:08.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n    ", "2023-10-16T17:30:13.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                pr", "2023-10-16T17:30:21.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                pri", "2023-10-16T17:30:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                prin", "2023-10-16T17:30:36.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a", "2023-10-16T17:30:41.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.pla", "2023-10-16T17:30:46.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0", "2023-10-16T17:31:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)", "2023-10-16T17:31:10.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n            ", "2023-10-16T17:31:15.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n             ", "2023-10-16T17:31:25.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n              ", "2023-10-16T17:31:34.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_", "2023-10-16T17:31:52.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.ope", "2023-10-16T17:31:57.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n         ", "2023-10-16T17:32:02.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n ", "2023-10-16T17:32:09.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n  ", "2023-10-16T17:32:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n", "2023-10-16T17:32:33.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting t", "2023-10-16T17:32:39.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting th", "2023-10-16T17:32:55.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n           ", "2023-10-16T17:33:03.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n  ", "2023-10-16T17:33:09.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n   ", "2023-10-16T17:33:14.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'in", "2023-10-16T17:33:19.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoic", "2023-10-16T17:33:24.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                       ", "2023-10-16T17:33:32.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        '", "2023-10-16T17:33:37.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.to", "2023-10-16T17:33:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.", "2023-10-16T17:33:53.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                      ", "2023-10-16T17:33:58.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                       ", "2023-10-16T17:34:15.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1", "2023-10-16T17:34:20.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c", "2023-10-16T17:34:25.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n   ", "2023-10-16T17:34:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n          ", "2023-10-16T17:34:55.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(tab", "2023-10-16T17:35:00.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(tabl", "2023-10-16T17:35:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table", "2023-10-16T17:35:10.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(tabl", "2023-10-16T17:35:15.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n         ", "2023-10-16T17:35:32.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n          ", "2023-10-16T17:35:37.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n ", "2023-10-16T17:35:50.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n  ", "2023-10-16T17:35:55.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and l", "2023-10-16T17:36:00.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n        ", "2023-10-16T17:36:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3", "2023-10-16T17:36:10.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n", "2023-10-16T17:36:15.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n", "2023-10-16T17:36:20.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = ", "2023-10-16T17:36:26.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), rou", "2023-10-16T17:36:31.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), roun", "2023-10-16T17:36:36.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round", "2023-10-16T17:36:41.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round(", "2023-10-16T17:36:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice", "2023-10-16T17:37:04.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n         ", "2023-10-16T17:37:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_num", "2023-10-16T17:37:23.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_numb", "2023-10-16T17:37:28.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n     ", "2023-10-16T17:37:33.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n      ", "2023-10-16T17:37:38.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n             ", "2023-10-16T17:37:46.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                      ", "2023-10-16T17:37:51.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                       ", "2023-10-16T17:37:56.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, #", "2023-10-16T17:38:07.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n      ", "2023-10-16T17:38:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n       ", "2023-10-16T17:38:34.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n        ", "2023-10-16T17:38:47.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n         ", "2023-10-16T17:39:07.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_n", "2023-10-16T17:39:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_nu", "2023-10-16T17:39:23.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_num", "2023-10-16T17:39:35.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_numb", "2023-10-16T17:39:40.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_numbe", "2023-10-16T17:39:48.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number", "2023-10-16T17:39:53.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number ", "2023-10-16T17:39:58.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st cha", "2023-10-16T17:40:03.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char", "2023-10-16T17:40:12.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n", "2023-10-16T17:40:23.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n ", "2023-10-16T17:40:28.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (h", "2023-10-16T17:40:37.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (ho", "2023-10-16T17:40:42.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font s", "2023-10-16T17:40:50.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                     ", "2023-10-16T17:40:57.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n          ", "2023-10-16T17:41:27.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n             ", "2023-10-16T17:41:32.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*", "2023-10-16T17:41:37.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2", "2023-10-16T17:41:55.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)", "2023-10-16T17:42:00.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_scre", "2023-10-16T17:42:05.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today(", "2023-10-16T17:42:18.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, #", "2023-10-16T17:42:23.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                    ", "2023-10-16T17:42:28.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                     ", "2023-10-16T17:42:36.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n    ", "2023-10-16T17:42:41.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                        ", "2023-10-16T17:42:49.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, #", "2023-10-16T17:42:56.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # ", "2023-10-16T17:43:01.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                       ", "2023-10-16T17:43:06.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                terms placement\n          ", "2023-10-16T17:43:18.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                terms placement\n           ", "2023-10-16T17:43:23.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                terms placement\n                \"\"\"\n ", "2023-10-16T17:43:32.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                terms placement\n                \"\"\"\n                terms_p = fitz.Point(initial", "2023-10-16T17:43:41.104Z": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                terms placement\n                \"\"\"\n                terms_p = fitz.Point(initial_</p>"}, "answer": "\"\"\"\nauthor: Milan Adhikari\ndate: 2022/11/30\ngithub: https://github.com/Milan-Adhikari\n\"\"\"\nimport math\nimport fitz\nimport pandas as pd\nimport tkinter as tk\nfrom tksheet import Sheet\nfrom datetime import date\nfrom tkinter import messagebox\nfrom PIL import Image, ImageTk\nfrom cryptography.fernet import Fernet\n\n# this is the color theme that is used\nDARK_BLUE = '#2E6CA4'\nGREYISH_WHITE = '#F4F6FC'\nLIGHT_BLUE = '#BCD3F2'\nGREY = '#D9D9D9'\nBLACK = '#1B1516'\nYELLO_ORANGE = '#EDAE49'\nPINK_RED = '#D14958'\nfont = 'Goudy Old Style'\n\n# user and password\nauthorization = {\n    'Sojan': b'gAAAAABjh4m_9g40gtS1lE2PvgAdDZz5i4wNsJJyvDDH--0VY4BuBGCkSQL7hGAYZ0qX6kP3xDkokdtiLrNRGroqWBJbF-4wHQ==',\n    'Anish': b'gAAAAABjh4m_cOAW0AkGwZQAscCvTK1D6ICbzknrWtpgbMf6a-n-xDjFTT_7EJ4WuAHvPmjJexccK-aYMgiR4KT75TCjkkQpggZY4VcwATs_1aSPPpMrbj4='\n}\n\"\"\"\nglobal variable\n\"\"\"\nglobal authenticated\nauthenticated = False\n\ndef main():\n    global authenticated\n    \"\"\"\n    setting up the root screen.\n    also we need to adjust the screen size to adjust to all the monitor sizes,\n    so we get the screen info to setup the root screen\n    \"\"\"\n    root = tk.Tk()\n    root.title('Invoice')  # giving the title to the window\n    root.configure(bg=DARK_BLUE)  # setting the background color\n    # getting screen information\n    width_screen = root.winfo_screenwidth()  # getting the width of the screen\n    height_screen = root.winfo_screenheight()  # getting the height of the screen\n    root.geometry(f\"{width_screen}x{height_screen}\")  # setting the root to screen dimensions\n    root.state('normal')  # maximizing the window\n    \"\"\"\n    now we need to place the logo of riu\n    also we need to authenticate the users.\n    \"\"\"\n    # a new canvas over the root window to place components\n    login_canvas = tk.Canvas(root, width=width_screen-round((160/1280)*width_screen) , height=height_screen-round((200/1280)*width_screen), bg=GREYISH_WHITE)\n    login_canvas.place(relx=0.5, rely=0.5, anchor='center')\n    logo_image = Image.open('logo.png')  # opening the riu logo\n    resized_image = logo_image.resize((round((270/1280)*width_screen), round((200/720)*height_screen)))  # resizing the logo\n    image = ImageTk.PhotoImage(resized_image)  # converting the logo to photoimage to display in tkinter\n    logo = tk.Label(login_canvas, image=image, bg=GREYISH_WHITE)  # displaying logo as a label\n    logo.place(relx=0.32, rely=0.35, anchor='center')\n    \"\"\"\n    placing the texts besides the logo\n    \"\"\"\n    key = b'khJ1kLe4S1KD9rBPUN5_uxrSB2GyNQJWklSSCVE4znU='\n    # placing the nutan text\n    nutan_text = tk.Label(login_canvas, text='Nutan', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    nutan_text.place(relx=0.53, rely=0.25, anchor='center')\n    # placing the research text\n    research_text = tk.Label(login_canvas, text='Research &', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    research_text.place(relx=0.582, rely=0.35, anchor='center')\n    # placing the innovation center text\n    innovation_text = tk.Label(login_canvas, text='Innovation Center', font=(font, round((40/720)*height_screen), 'bold'), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    innovation_text.place(relx=0.648, rely=0.45, anchor='center')\n    \"\"\"\n    placing username and password field\n    \"\"\"\n    # creating a rectangle\n    rectangle = login_canvas.create_rectangle(round((300/1280)*width_screen),round((320/1280)*width_screen),round((840/1280)*width_screen), round((420/1280)*width_screen), outline=DARK_BLUE )\n    # username label\n    username = tk.Label(login_canvas, text='Username:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    username.place(relx=0.4, rely=0.67, anchor='center')\n    # username field\n    username_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    username_field.place(relx=0.55, rely=0.67, anchor='center')\n    # password label\n    password = tk.Label(login_canvas, text='Password:', font=(font, round((18/1280)*width_screen)), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    password.place(relx=0.4, rely=0.74, anchor='center')\n    # password field\n    password_field = tk.Entry(login_canvas, width=round((20/1280)*width_screen), show='*', font=(font, round((15/1280)*width_screen)), fg=DARK_BLUE)\n    password_field.place(relx=0.55, rely=0.74, anchor='center')\n    \"\"\"\n    placing the login button\n    \"\"\"\n    login = tk.Button(login_canvas, text='Login', font=(font, round((18/1280)*width_screen)), width=round((10/1080)*height_screen), height=1,\n                    command=lambda: authentication(authenticated, login_canvas, username_field.get(), password_field.get()), fg=DARK_BLUE, bg=GREYISH_WHITE)\n    login.place(anchor='center', relx=0.5, rely=0.9)\n    def authentication(authenticated, canvas, user, password):\n        # global authenticated\n        if user in authorization.keys():\n            fernet = Fernet(key)\n            if password == fernet.decrypt(authorization[user]).decode():\n                authenticated = True\n                canvas.destroy()\n                invoice = invoice_class(root, width_screen, height_screen, authenticated)\n                template = invoice.invoice_screen()\n        else:\n            messagebox.showerror('Not Authorized', 'Either the Username or Password is incorrect')\n    # mainloop of the program\n    if not authenticated:\n        root.mainloop()\n\n\ndef function_to_write(actual_data, actual_table_data):\n    invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n    dataframe = pd.DataFrame(invoice_sheet)\n    dataframe.dropna(inplace=True)\n    dataframe.drop(dataframe.filter(regex=\"Unnamed\"),axis=1, inplace=True)\n    # getting the subtotal of the invoice\n    subtotal = 0\n    for i in actual_table_data:\n            subtotal += int(i[3])\n    \"\"\"\n    actual data to be appended to the records\n    \"\"\"\n    data = {\n        'Invoice No.': int(actual_data['invoice_number']),\n        'Date': actual_data['date'],\n        'Terms': actual_data['terms_days'],\n        'Invoice To': actual_data['company_name'],\n        'Address': actual_data['company_address'],\n        'Total': subtotal\n    }\n    \"\"\"\n    converting the dictionary to be appended into a dataframe\n    \"\"\"\n    data_dataframe = pd.DataFrame([data])\n    # now we concat the two dataframes into a single dataframe\n    merged_dataframe = pd.concat([dataframe, data_dataframe], ignore_index=True)\n\n    merged_dataframe.to_csv('.\\\\InvoiceRecords\\\\invoice_details.csv', index=False)\n\n\n\"\"\"\ndefining the main invoice class containing everything\n\"\"\"\nclass invoice_class:\n    def __init__(self, root, width_screen, height_screen, authenticated):\n        self.root = root\n        self.width_screen = width_screen\n        self.height_screen = height_screen\n        self.authenticated = authenticated\n        # print(authenticated)\n#     def end_function(self, invoice_canvas):\n#             invoice_canvas.destroy()\n#             self.root.destroy()\n    def invoice_screen(self):\n        invoice_screen_root =  False\n        # setting up the entire invoice canvas\n        invoice_canvas = tk.Canvas(self.root, width=self.width_screen, height=self.height_screen, bg=GREYISH_WHITE)\n        invoice_canvas.place(relx=0.5, rely=0.5, anchor='center')  # placing on the start of the screen\n        # \"\"\"\n        # setting up the main end button for the program\n        # \"\"\"\n        # end_button = tk.Button(invoice_canvas, width=10, text='End', font=(font, round((20/1080)*self.height_screen)),\n        #                         bg=PINK_RED, fg=GREYISH_WHITE,\n        #                         command=lambda: self.end_function(invoice_canvas))\n        # end_button.place(relx=0.4, rely=0.85)\n        # invoice screen components\n        a4_height = self.height_screen-(round(100/720)*self.height_screen)\n        a4_width = (self.height_screen*(1/math.sqrt(2)))-(round(100/720)*self.height_screen)\n        template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n        template_frame.place(anchor='center', relx=0.8, rely=0.5)\n        \"\"\"\n        pymupdf code to display the pdf\n        \"\"\"\n        location = 'invoiceRIU_template.pdf'\n        pdf_file = fitz.open(location)\n        # page\n        page = pdf_file.load_page(0)\n        page.insert_font()\n        # creating a raster image\n        pix = page.get_pixmap()\n        # set the mode depending on alpha\n        mode = \"RGBA\" if pix.alpha else \"RGB\"\n        # img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        img = Image.frombytes(mode, [pix.width, pix.height], pix.samples)\n        # width_ratio = 270/1280  # this number is the ratio that was calculated in different screens\n        # height_ratio = 200/720  # this number is the ratio that was calculated in different screens\n        resized_img = img.resize((round((410/1280)*self.width_screen), round((620/1280)*self.width_screen)))\n        tkimg = ImageTk.PhotoImage(resized_img)\n        template = tk.Label(template_frame, image=tkimg)\n        template.place(anchor='center', relx=0.5, rely=0.5)\n        \"\"\"\n        getting the entry items\n        \"\"\"\n        # this is the part where we import the csv file\n        invoice_sheet = pd.read_csv('.\\\\InvoiceRecords\\\\invoice_details.csv')\n        dataframe = pd.DataFrame(invoice_sheet)\n        \"\"\"\n        checking to see if this is the first entry in the invoice details sheet\n        also getting the invoice number\n        \"\"\"\n        dataframe.dropna(inplace=True)  # dropping the nan values if any\n        if dataframe.empty:\n                invoice_num = int(3846803)\n        else:\n                invoice_num = int(dataframe['Invoice No.'].iloc[-1]+1)\n        # po number\n        po_number = tk.Label(invoice_canvas, text='Po No:', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        po_number.place(relx=0.03, rely=0.1)\n        # pan box\n        po_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((40/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        po_box.place(relx=0.08, rely=0.1)\n        # terms\n        terms = tk.Label(invoice_canvas, text='Terms(days):', font=(font, round((20/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        terms.place(relx=0.28, rely=0.1)\n        # terms options\n        OPTIONS = [\n            \"1 Day\",\n            \"7 Days\",\n            \"14 Days\",\n            \"21 Days\",\n            \"30 Days\",\n            \"60 Days\",\n            \"90 Days\",\n            \"120 Days\",\n            \"180 Days\",\n            \"360 Days\"\n        ]\n        variable = tk.StringVar(invoice_canvas)\n        variable.set(OPTIONS[1])  # default\n        terms_dropdown = tk.OptionMenu(invoice_canvas, variable, *OPTIONS)\n        terms_dropdown.place(relx=0.36, rely=0.095)\n        \"\"\"\n        invoice to component\n        \"\"\"\n        # invoice to component\n        invoice_to = tk.Label(invoice_canvas, text='Invoice to *', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        invoice_to.place(relx=0.03, rely=0.15)\n        # invoice to company name\n        invoice_to_company_name_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_company_name_box.place(relx=0.03, rely=0.19)\n        # invoive to company adress\n        invoice_to_address_box = tk.Text(invoice_canvas, height=round((1/1080)*self.height_screen), width=round((60/1080)*self.height_screen), font=(font, round((20/1080)*self.height_screen)))\n        invoice_to_address_box.place(relx=0.33, rely=0.19)\n        \"\"\"\n        table component\n        \"\"\"\n        frame = tk.Frame(invoice_canvas, width=round((500/720)*self.height_screen), height=round((300/720)*self.height_screen), bg=DARK_BLUE)\n        frame.place(relx=0.03, rely=0.24)\n        header = [\"Description*\", \"Qty\", \"Rate\", \"Total\"]\n        sheet = Sheet(frame,\n                    headers=header,\n                    header_fg=DARK_BLUE,\n                    data=[[\"\" for c in range(4)] for r in range(14)],\n                    max_colwidth=round((550/720)*self.height_screen),\n                    width=round((750/1280)*self.width_screen),\n                    height=round((300/720)*self.height_screen),\n                    column_width=round((75/720)*self.height_screen),\n                    index_bg=GREYISH_WHITE,\n                    show_x_scrollbar=False,\n                    outline_thickness=3,\n                    outline_color=GREYISH_WHITE,\n                    frame_bg=DARK_BLUE,\n                    table_grid_fg=GREYISH_WHITE,\n                    table_bg=DARK_BLUE,\n                    table_fg=GREYISH_WHITE,\n                    table_selected_cells_bg=LIGHT_BLUE)\n        sheet.enable_bindings()\n        # sheet.columnconfigure(1, minsize=50)\n        sheet.column_width(column=0, width=round((500/720)*self.height_screen))\n        sheet.column_width(column=1, width=round((40/720)*self.height_screen))\n        sheet.column_width(column=3, width=round((95/720)*self.height_screen))\n        sheet.grid(row=0, column=0)\n        \"\"\"\n        customer message part portions\n        \"\"\"\n        # customer message\n        customer_message_label = tk.Label(invoice_canvas, text='Customer Message', font=(font, round((18/1080)*self.height_screen), 'bold'), bg=DARK_BLUE, fg=GREYISH_WHITE)\n        customer_message_label.place(relx=0.03, rely=0.66)\n        # customer message text box\n        customer_message_box = tk.Text(invoice_canvas, height=round((4/1080)*self.height_screen), width=round((140/1080)*self.height_screen), font=(font, round((18/1080)*self.height_screen)))\n        customer_message_box.place(relx=0.03, rely=0.7)\n        \"\"\"\n        Preview button\n        \"\"\"\n        def template_function():\n                # destroying the previous frame\n                # frame.destroy()\n                print(a4_width, a4_height)\n                template_frame = tk.Frame(invoice_canvas, width=a4_width, height=a4_height, bg=GREYISH_WHITE)\n                template_frame.place(anchor='center', relx=0.8, rely=0.5)\n                \"\"\"\n                pymupdf code to display the pdf\n                \"\"\"\n                location = 'invoiceRIU_template.pdf'\n                pdf_file = fitz.open(location)\n                # page\n                page = pdf_file.load_page(0)\n                \"\"\"\n                getting the necessary data\n                \"\"\"\n                actual_data = {\n                        'invoice_number': invoice_num,\n                        'po_number': po_box.get(\"1.0\",\"end-1c\"),\n                        'date': str(date.today()),\n                        'terms_days': variable.get(),\n                        'company_name': invoice_to_company_name_box.get(\"1.0\",\"end-1c\"),\n                        'company_address': invoice_to_address_box.get(\"1.0\",\"end-1c\"),\n                        'customer_message': customer_message_box.get(\"1.0\",\"end-1c\"),\n                }\n                table_data = sheet.get_sheet_data()\n                actual_table_data = []\n                for i in range(len(table_data)):\n                        if len(table_data[i][0])!=0:\n                                actual_table_data.append(table_data[i])\n                \"\"\"\n                calculating the total in the sheet\n                \"\"\"\n                for i in actual_table_data:\n                        if len(i[1])!=0 and len(i[2])!=0:\n                                i[3] = str(int(i[1])*int(i[2]))  # this is the case when both qty and rate are entered\n                        elif len(i[1])==0 and len(i[2])!=0:\n                                i[3] = i[2]\n                        elif len(i[3])!=0:\n                                i[3]=i[3]\n                        else:\n                                i[3]=str(0)\n                \"\"\"\n                invoice number placement\n                \"\"\"\n                initial_x = round((140/1280)*self.width_screen)  #(round((410/1280)*self.width_screen), round((620/1280)*self.width_screen))\n                initial_y = round((63/1280)*self.width_screen)\n                invoice_num_p = fitz.Point(initial_x, initial_y)\n                invoice_number = str(actual_data['invoice_number'])\n                rc = page.insert_text(invoice_num_p, # bottom-left of 1st char\n                                        invoice_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                po number placement\n                \"\"\"\n                po_num_p = fitz.Point(initial_x, initial_y+round((19/1280)*self.width_screen))\n                po_number = str(actual_data['po_number'])\n                rc = page.insert_text(po_num_p, # bottom-left of 1st char\n                                        po_number, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n\n                \"\"\"\n                date placement\n                \"\"\"\n                date_p = fitz.Point(initial_x, initial_y+round(((19*2)/1280)*self.width_screen))\n                today = str(date.today())\n                rc = page.insert_text(date_p, # bottom-left of 1st char\n                                        today, # the text (honors '\\n')\n                                        fontname = \"helv\", # the default font\n                                        fontsize = 12, # the default font size\n                                        rotate = 0, # also available: 90, 180, 270\n                )\n                \"\"\"\n                terms placement\n                \"\"\"\n                terms_p = fitz.Point(initial_</p>", "codeExecutionHistory": {}, "ignoreEncryptDecrypt": true}